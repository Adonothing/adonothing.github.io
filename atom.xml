<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adunas🍀</title>
  
  
  <link href="https://www.adunas.top/atom.xml" rel="self"/>
  
  <link href="https://www.adunas.top/"/>
  <updated>2024-05-02T09:09:58.000Z</updated>
  <id>https://www.adunas.top/</id>
  
  <author>
    <name>阿杜那斯🍀</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日程表：2024年05月</title>
    <link href="https://www.adunas.top/posts/20240502a.html"/>
    <id>https://www.adunas.top/posts/20240502a.html</id>
    <published>2024-05-02T09:09:58.000Z</published>
    <updated>2024-05-02T09:09:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章导航总览"><ahref="./20240221a.html#2024年5月">文章导航总览</a></h1><ol type="1"><li>主页 home 静态 密码<ol type="1"><li>hexo博客</li><li>PPT页 home/ppt 静态</li><li>日程表 schedule 电脑服务器</li><li>word press网站 阿里云服务器</li><li>随写备忘录 和日程表一起</li><li>收支 和备忘录一起</li><li>物品统计 和备忘录一起</li></ol></li></ol>]]></content>
    
    
    <summary type="html">🥐本文记录 Adunas 2024 年 05 月的日程安排和实施情况</summary>
    
    
    
    <category term="日程表" scheme="https://www.adunas.top/categories/%E6%97%A5%E7%A8%8B%E8%A1%A8/"/>
    
    
    <category term="日程表" scheme="https://www.adunas.top/tags/%E6%97%A5%E7%A8%8B%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>游戏-星露谷物语</title>
    <link href="https://www.adunas.top/posts/20240430a.html"/>
    <id>https://www.adunas.top/posts/20240430a.html</id>
    <published>2024-04-30T01:19:26.000Z</published>
    <updated>2024-04-30T01:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<!-- # [文章导航总览](./20240221a.html#ipa) --><h1 id="芋头种子">芋头种子</h1><ol type="1"><li>姜岛商人</li></ol><h1 id="上古水果">上古水果</h1><ol type="1"><li>春夏秋</li><li>28天成熟</li><li>7天结果</li><li>种子制造机做种子</li></ol><h1 id="龙虾">龙虾</h1><p>海洋里放蟹笼</p><h1 id="下矿">下矿</h1><p>奶酪和金星菠萝。</p>]]></content>
    
    
    <summary type="html">🥧本文是星露谷物语的教程。</summary>
    
    
    
    <category term="游戏" scheme="https://www.adunas.top/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="游戏" scheme="https://www.adunas.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="星露谷物语" scheme="https://www.adunas.top/tags/%E6%98%9F%E9%9C%B2%E8%B0%B7%E7%89%A9%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>创业：自行车电子防盗系统</title>
    <link href="https://www.adunas.top/posts/20240428a.html"/>
    <id>https://www.adunas.top/posts/20240428a.html</id>
    <published>2024-04-28T09:27:40.000Z</published>
    <updated>2024-04-28T09:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程实践导航"><ahref="./20240318zf.html#自行车电子防盗系统">工程实践导航</a></h1><h1 id="创业计划书书写帮助">创业计划书书写帮助</h1><ol type="1"><li>写作要点：<ahref="https://www.bilibili.com/video/BV1xb411k7Fd/?share_source=copy_web&amp;vd_source=6b55cb6788b1952e04c06b095d772810">【十分钟教你学会创业计划书！】</a></li><li>模板：<ahref="https://www.bilibili.com/video/BV1b34y177Zr/?share_source=copy_web&amp;vd_source=6b55cb6788b1952e04c06b095d772810">【大学生创新创业计划书】</a></li></ol><p>零模块:项目状况，在做一件什么样的事，让投资人有大致了解第一模块:市场概括，进入什么样的领域，市场空间有多大，增速如何.第二模块:目标客户群存在什么样的需求和痛点，目标客户的需求是什么，存在需要解决的问题是什么。我们的机会所在。（表达清晰表达自己独到的眼光）第三个模块:解决方案或产品，如何解决问题痛点，如何满足需求创造价值，产品或方案描述，业务模式描述，第四模块:竞争对手，竞争对手情况，其他玩家提供什么样的产品，如何解决问题，我们和竞争对手的优势和差异。第五模块，运营状况，目前公司运营状况如何，在哪个阶段，数字说话，前面是虚的东西，这里是实的。第六模块未来规划，未来如何发展战略是什么，包括业务和财务规划。第七模块，团队who 团队介绍第八模块:融资计划，需要融多少钱，花在什么地方。</p><ol type="1"><li>脑子里有想法</li><li>查阅资料</li><li>写标题，关键字</li><li>分轻重，详略得当，给大概页数</li><li>概要，头脑风暴，面面俱到，想到什么写什么</li><li>展开详述，填充内容，有什么写什么，能写多少，写多少。</li><li>成文，去除废话，详略得当。</li><li>调整优化，反复增删查改。</li><li>通读、勘误、审核。</li></ol><h1 id="创业初心">创业初心</h1><p>0.5 页</p><ol type="1"><li>车被偷过，喜欢骑车，害怕被偷，希望随停随放<ol type="1"><li>我对这个事情感兴趣</li></ol></li><li>很多身边的人的车也被偷过，就不想再买了。每年中国有大量的自行车被偷，维权成本大<ol type="1"><li>市场需求很大</li></ol></li><li>市面上的产品功能单一，主要是gps，没有车辆状态监控，没有自动充电、没有报警系统，没摄像头捕捉人脸<ol type="1"><li>市场竞争力强</li></ol></li><li>个人的技术积累，自动化，导航制导与控制。科创经历、科研经历<ol type="1"><li>个人能力强</li></ol></li><li>赚钱，做一个真正服务社会、体现自身价值，面向未来的一项神圣的工作。<ol type="1"><li>拔高，内涵正确。</li></ol></li><li>只有创业才能做自己真正喜欢的事情，并为之奋斗一生。</li></ol><p>  身边经常有朋友车被偷，自己的自行车被偷过两次。每次出门的时候，自行车也不敢离开视线，用得很不舒心，不放心。如果能做一个产品，即用即开，即停即锁，那会是多好。再好的锁也会被撬开，被剪断，如果能有一个产品能够及时地监测，并报告给车主，同时能够拍下小偷地样貌那该多好呀。如果就算被偷，能够定位，并找到自己地自行车，那该多好呀。</p><h1 id="项目概要">项目概要</h1><p>0.5 页</p><p>卖什么产品，提供什么服务，产品的构成，产品的主要特点（技术点），受众，以及未来规划。</p><ol type="1"><li>自行车电子防盗系统</li><li>主要为硬件产品，以及配套的软件服务</li><li>硬件包含多款：摄像头、导航定位系统、5G移动通信模块，以及一个微型监测控制单元。<ol type="1"><li>摄像头：拍照取证</li><li>卫星导航定位系统：粗略定位查找车辆</li><li>5G移动通信模块：向手机传递信息</li><li>陀螺仪、加速度计：监测车辆震动、摔倒</li><li>微型发电机：自动充电，解决续航问题</li><li>断开报警锁：锁被强行破拆，会报警</li><li>UWB 短距离定位：精确查找物体</li></ol></li><li>软件：手机app。提示、报警、定位、录像等监测功能。</li><li>产品提供完整的自行车监控报警服务，一旦车辆有异常，会及时通过手机通知用户。</li><li>受众：喜欢短距离代步的自行车爱好者，经常要锁车购物、吃饭等情况。</li><li>未来规划：智能门锁、电动车防盗系统等。</li><li>手机靠近自动连接，走了自动锁车，锁车系统和充电系统组合，线缆遭到破坏就会立刻报警</li><li>符合一整个低碳环节</li></ol><p>  制作一个低成本的自行车电子防盗系统，系统中包含摄像头、导航定位系统、5G移动通信模块，以及一个微型监测控制单元。主要服务对象是喜欢骑中高档自行车，有短暂锁车防盗的需求客户。应用前景广阔：智能锁、电动车防盗系统等。</p><p>自行车智能电子防盗系统hm</p><h1 id="市场调研">市场调研</h1><p>1页</p><ol type="1"><li>偷盗犯罪率</li><li>被偷后的心理</li><li>共享单车的优势和劣势</li><li>市面上的竞品</li><li>市场的需求</li></ol><h1 id="产品方案">产品方案</h1><p>3页</p><p>技术路线：主要硬件功能、软件（客户端）功能</p><ol type="1"><li>详述产品的构成，每个单元的具体功能<ol type="1"><li>得有产品大致得结构图</li></ol></li><li>每个模块的具体技术路线，核心竞争力</li><li>打造什么样的产品，产品的路线是什么</li><li>产品的迭代，未来的服务</li></ol><p>产品设计转绑定功能</p><h1 id="经营目标">经营目标</h1><p>2页</p><h2 id="品牌概念">品牌概念</h2><ol type="1"><li>零件<ol type="1"><li>降低被偷，爱上骑车，低碳生活，降低犯罪率，减轻警察负担，增加汽车销售</li><li>为学生提供打折服务</li></ol></li><li>整车<ol type="1"><li>自己做</li><li>和车企合作</li></ol></li></ol><h2 id="客户人群">客户人群</h2><ol type="1"><li>全套系统：中高端自行车爱好者，能负担整套费用</li><li>喜欢通勤的人，短距离，经常临时停车用户</li><li>智能自行车爱好者，整车</li></ol><h2 id="营销策略">营销策略</h2><ol type="1"><li>噱头：让人偷，能查，直接放在马路边，给人偷，没人有能力偷走。</li><li>自行车展。新能源车有新能源车的车展，自行车也有自己的智能车展</li><li>新媒体宣传：抖音、小红书、小程序、网站</li></ol><h2 id="市场计划">市场计划</h2><ol type="1"><li>产品是要面世，要卖的，你的计划是什么要明确。</li><li>时间节点，做什么研发，做什么产品</li><li>每个产品出来，你的市场是什么，面向什么对象</li></ol><p>第一阶段：造一辆车（研发）</p><p>第二阶段：推送产品</p><p>第三阶段：扩展市场</p><p>怎么拓展，时间轴</p><p>合作</p><h2 id="投资与回报">投资与回报</h2><p>预算多少钱，希望投资多少钱啊</p><p>？？？</p><ol type="1"><li>分门别类计算投资、分阶段投资；</li><li>产出：分阶段的产品，计划与产出</li></ol><h1 id="管理方案">管理方案</h1><p>2页</p><h2 id="人事制度">人事制度</h2><ol type="1"><li>团队介绍，目前就我一个人</li><li>人事架构、组织管理的结构的图</li><li>职务需求</li></ol><h2 id="风险预测">风险预测</h2><h1 id="未来规划">未来规划</h1><p>0.5页</p>]]></content>
    
    
    <summary type="html">🥝本文描述自己的创业计划：自行车电子防盗系统</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="创业" scheme="https://www.adunas.top/tags/%E5%88%9B%E4%B8%9A/"/>
    
    <category term="防盗" scheme="https://www.adunas.top/tags/%E9%98%B2%E7%9B%97/"/>
    
    <category term="自行车" scheme="https://www.adunas.top/tags/%E8%87%AA%E8%A1%8C%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>工程实践：STM32F103Cx最小系统设计</title>
    <link href="https://www.adunas.top/posts/20240416b.html"/>
    <id>https://www.adunas.top/posts/20240416b.html</id>
    <published>2024-04-16T08:58:46.000Z</published>
    <updated>2024-04-23T07:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程实践导航"><ahref="./20240318zf.html#STM32F103Cx最小系统">工程实践导航</a></h1><h1 id="说明">说明</h1><p>  STM32F103Cx最小系统的设计。文章内容主要包含：设计指南、器件选型、实际设计、制作测试、归纳总结等。</p><p>  STM32F103Cx最小系统的设计原则是模块化，目的是方便验证、方便手动焊接、以及批量机器焊接、方便拆装更换，方便维修查找PCB的故障。相比于传统的最小系统设计，将传统的最小系统分化为两块板子，分别命名为最小系统核心板和最小系统底板，最小系统核心板，集成了最核心的部分，以及小型化、模块化，仅包含微控制器、晶振电路、控制器滤波电容电路、电源指示灯、全引脚板对板微型连接器；其中本来包含LDO 电源电路，但是研究发现，对于不同的电源，LDO的需求不同，无法找到通用合适的LDO，尤其在电源容量紧张的场景，所以电源模块单独成模块设计，方便更换，但是最小系统核心板必须用独立的电源模块供电，即某电源模块给该核心板供电后，不能给其他模块使用。最小系统底板，也是必须配套的，和一般的底板有所不同，底板包含一些直插的器件和模块，主要是：核心板底座、USB接口、程序下载接口JTGA、电源模块底座、2.54mm排插排母座、电源接线口等。最小系统底板提供对核心板核心功能的验证或使用：供电、下载程序、兼容洞洞板排针或排母等功能。即核心板和最小系统底板，以及电源模块构成市面上常见的最小系统。这样缺点当然是多了板对板连接器，尺寸和重量会些微增加，增加连接器等成本，但是用的都是手机电脑主板级别的连接器，尺寸和重量均很小。反而带了很多好处：1.降低设计复杂度，小模块小模块的设计，比整板设计更容易。2.缩短周期、提振信心。3.方便焊接、维修。不用再重新做一整块板子，用哪个焊哪个，坏哪个修哪个。4.降低成本，方便更换以及复用。5.便于升级，可以重新设计某一个模块，以此增加它的性能。</p><h1 id="最小系统核心板">最小系统核心板</h1><h2 id="设计指南和器件选型">设计指南和器件选型</h2><p>  主要依据元器件的手册、网上资料和个人经验总结设计指南，依据设计指南，选择合适低价的元器件。</p><h3 id="板对板连接器">板对板连接器</h3><p>  电流要求：</p><ol type="1"><li>单片机最大电流为 150mA</li><li>led 最大电流为 20mA</li></ol><p>  所以连接器应该选择电流能力大于等于 0.3A的。</p><ol type="1"><li>板对板连接器 <ahref="https://item.taobao.com/item.htm?id=675307456019&amp;scene=taobao_shop&amp;skuId=5028842742268&amp;spm=a1z10.1-c-s.w5003-25266276658.33.2cc66440jknhAW">SGD-05-M/F-020P-2X-G21</a>单个引脚的最大电流为 0.5A。同时 3mm的高度是最低的，价格最便宜的，只在淘宝卖，嘉立创无，不可用其他连接器替代，但是客服提供图纸和3D 模型。2024年4月23日，单个的价格为 1 元。</li></ol><h3 id="双晶振">双晶振</h3><p>  STM32微控制器通常外接两个晶振，分别是低速晶振（32.768kHz）和高速晶振（通常为8 MHz）。这两个晶振的作用如下：</p><ol type="1"><li>低速晶振（LSE）：提供外部低速时钟，通常用于实时时钟（RTC）电路的时钟源，以及为低功耗模式下的计时提供服务。如果设计中不需要RTC功能，可以选择不焊接此晶振。低速晶振的启动时间比高速晶振短，但在校准之后的时钟频率精度相对较差。</li><li>高速晶振（HSE）：提供外部高速时钟，用于生成更精确的系统时钟。这个时钟源对于需要高稳定度时钟的应用来说是非常重要的。高速晶振的频率通常为8MHz，但可以根据产品需求选择其他频率，只需注意倍分频的设置。</li></ol><div class="note danger modern"><p>结论：两个晶振都要</p></div><p>  晶振选型可参考本博客文章<ahref="./20240416a.html#无源晶振详解">无源晶振详解</a>。</p><h3 id="低速晶振选型">低速晶振选型</h3><p>  设计无源晶振，手册第54页要求如下：</p><ol type="1"><li>CG 和 CL 选用高质量陶瓷电容，容值在 5pF-15pF。</li><li>晶振的选择上，频率为负载电容要小于等于 7pF，不要选择 12.5pF。</li><li>电路板典型的杂散电容值为：2-7pF，我们用 4pF 计算。</li></ol><p>  晶振选型方案如下：</p><p>典型的，常见 MC-306、MC-405、MC-406 的这种 32.768 kHz晶振不是不能选择，负载电容典型值为：12.5 pF，但是需要定制，常见为6pF、7pF、9pF 和 12pF，所以要注意选择合适的负载电容值。尺寸还有更小的MC-146、MC-146，以及更小的 FC-135、FC-145、FC-255。还有更小的FC-12M，但是不是主流。</p><p>最终选择 <ahref="https://item.taobao.com/item.htm?abbucket=12&amp;id=753850636251&amp;ns=1&amp;skuId=5371113711623&amp;spm=a21n57.1.item.326.1a3f523cwPiWmR">FC-13532.768KHz ±20ppm 7pF</a>，因为在淘宝和嘉立创上常见，同时 AN2867手册中也推荐了 FC-135。2024年4月23日价格为 0.5元，运费 2 元。</p><p>  电容计算得到典型值是 6pF，范围是 0 - 10pF。选择精度高的：5%。预留一个电阻位，控制驱动电流，默认先焊接 0 Ω。</p><h3 id="高速晶振选型">高速晶振选型</h3><p>  8MHz，需要查看 AN2867 手册。具体设计还挺麻烦的，这里进行简化：</p><ol type="1"><li>Load capacitance 负载电容。（控制震荡频率）<ol type="1"><li>这个晶振是工作晶振，不需要低功耗，手册对负载电容的大小无限制，这样CG 和 CL相比之前的低速晶振设计，容值就大一点，拉升频率能力更弱（期望和实际负载电容偏差时，频率变化越小）。</li><li>手册要求电容 CG 和 CL 容值在 5pF-25pF之间。</li><li>取杂散电容为 4pF，则匹配晶振的负载电容范围是 6.5-16.5 pF。</li></ol></li><li>Oscillator transconductance 振荡器跨导。（控制震荡稳定）<ol type="1"><li>为了使振荡开始并达到稳定相位，振荡器必须提供足够的增益来补偿回路损耗并为振荡积累提供能量。</li><li>振荡回路临界晶体增益 <spanclass="math inline">\(g_{mcrit}\)</span>。<spanclass="math inline">\(g_{mcrit} = 4 \cdot ESR \cdot (2πF)^2 \cdot (C0 +CL)^2\)</span>。ESR 值查看手册。</li><li>最大临界晶体跨导 <span class="math inline">\(g_m\)</span> 由芯片STM32 手册给出。</li><li>最后计算收益边际公式：<span class="math inline">\(gain_{margin} =g_m / g_{mcrit}\)</span>，设计要求确保该值大于 5。</li><li>暂不继续深入。暂不考虑本点要求。</li></ol></li><li>Drive level and external resistor calculation驱动电平和外部电阻的计算<ol type="1"><li>预留一个电阻位，控制驱动电流。焊接 0 Ω电阻即可，具体计算暂不了解。</li></ol></li><li>Crystal pullabilty 晶体的波动性，也被称为晶体灵敏度<ol type="1"><li>暂不考虑。</li></ol></li><li>PCB design guidelines PCB设计指南<ol type="1"><li>离芯片近，具体是什么近呢？中间不要有其他元器件，即芯片-晶振电路-其他元器件。</li><li>电容对称</li><li>电容还是晶振更靠近芯片，无这种说法。</li><li>不能太多测试点</li><li>正面 GND 包裹晶振电路，并通过多过孔连接 PCB 背后的 GND。背后的 GND要求完全覆盖晶振电路，且不连接总 GND，而是通过正面的包裹的 GND线条一个端点连接总 GND。</li><li>强烈建议晶振电路 PCB区域应用保形涂层。特别是石英下方，以防止可能导致启动问题的潮湿，灰尘，湿度和极端温度。</li><li>如果使用金属封装的晶体，请勿将其连接到振荡器地。</li><li>高速信号线离晶体管电路保留间距，如 30 mils。</li></ol></li><li>焊接<ol type="1"><li>谨慎焊接，焊接是一个敏感的过程，特别是对于低频晶体。</li><li>温度过高会损坏 ESR。</li></ol></li></ol><p>  晶振选型方案如下：</p><ol type="1"><li>扬兴科技 <ahref="https://detail.tmall.com/item.htm?abbucket=12&amp;id=747734347715&amp;ns=1&amp;spm=a21n57.1.item.142.1a3f523cwPiWmR&amp;skuId=5157386133646">YSX321SL3225 8M 12PF 10PPM</a>。价格最便宜，2024年4月23日单价0.5，无运费。</li><li>计算 CG 和 CL 容值电容为：16pF。</li></ol><h3 id="led">LED</h3><p>  LED 没有什么电气的特殊要求。选择价格便宜的、有规格书的。 LED注意额定电压和额定电流即可。XL-1608系列电阻价格最便宜，在嘉立创上可购买。</p><table><colgroup><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /><col style="width: 12%" /></colgroup><thead><tr class="header"><th>型号</th><th>颜色</th><th>100+价格</th><th>1000+价格</th><th>链接</th><th>额定参数</th><th>3.3V限流电阻</th><th>5V限流电阻</th></tr></thead><tbody><tr class="odd"><td>XL-1608UWC-04</td><td>白</td><td>0.035</td><td>0.028</td><td><a href="https://item.szlcsc.com/1051417.html">链接</a></td><td>5mA 2.6-3.0V</td><td>60-140Ω</td><td>400-400Ω</td></tr><tr class="even"><td>XL-1608SURC-04</td><td>红</td><td>0.029</td><td>0.023</td><td><a href="https://item.szlcsc.com/1051407.html">链接</a></td><td>20mA 2.0-2.4V</td><td>65-133.3Ω</td><td>130-150Ω</td></tr><tr class="odd"><td>XL-1608UYC-04</td><td>黄</td><td>0.043</td><td>0.035</td><td><a href="https://item.szlcsc.com/1051412.html">链接</a></td><td>20mA 1.9-2.3V</td><td>50-70Ω</td><td>135-155Ω</td></tr><tr class="even"><td>XL-1608UBC-04</td><td>蓝</td><td>0.024</td><td>0.019</td><td><a href="https://item.szlcsc.com/1051416.html">链接</a></td><td>20mA 2.7-3.3V</td><td>0-30Ω</td><td>85-115Ω</td></tr><tr class="odd"><td>XL-1608UGC-04</td><td>翠绿</td><td>0.027</td><td>0.022</td><td><a href="https://item.szlcsc.com/1051413.html">链接</a></td><td>20mA 2.7-3.3V</td><td>0-30Ω</td><td>85-115Ω</td></tr></tbody></table><p>2024年4月24日。其中 1608 代表封装尺寸，最后 04 或者 06 代表高度。C前面的字母代表颜色。限流电阻计算的是理论值，电阻也是有额定最大功率的，在几十W到几百W之间，不同型号功率不一样。工作电流不用满额定值上运行，这样太亮了，一般可以是几mA 的电流，所以电阻计算的在几百 Ω，常用默认选择最大 1KΩ即可。另外考虑芯片 IO 引脚最大电流驱动力：25mA，电压 4v，所以用芯片控制LED 的，也要用电源为 3.3V 的，不要用 5V的驱动电压，以免LED损坏短路时，损坏芯片。电阻选择大于 200Ω，先默认 1KΩ。</p><h3 id="电源模块">电源模块</h3><p>  查阅手册：</p><ol type="1"><li>单片机的最大工作电流为 150mA。</li><li>单片机电源电压范围为 2.4-3.6V，典型值为3.3V。</li><li>普通 I/O 接口输入电压范围为 0-5V，能充分兼容 5V 传感器。</li><li>LED 最大电流为 20mA，按照 20mA 计算。</li></ol><p>所以核心板按照负载 200mA电流计算。常见的电源电压为 5V 和3.3V，输入和输出电压压差为 0 - 1.7V，开关稳压的稳压压差一般大于2V，所以我们选择一款线性稳压 LDO，希望能在电源电压为 5V 和3.3V时均能输出合适的电压供核心板工作，对于 LDO，我们的需求是：</p><ol type="1"><li>LDO 压降不能超过 3.3 - 2.4 = 0.9V。越小越好，越小效率越高。</li><li>LDO 最大电流不能低于 300mA。</li><li>5V输入，3.3V输出的情况下，温升不能超过50℃。计算温升系数要低于 50 ÷((5-3.3)*0.2) = 147.06 ℃/W 左右。</li><li>满足以上前提下选择尺寸更小的 LDO 型号和封装。</li></ol><p>这很难筛选，经常调查，LDO的电流能力越大，对散热要求越高，尺寸越大，大一点常见的封装为SOT-223-3，压降也随之增大，常见至少为 1.1V，无法适应 3.3V的工作电压；LDO 尺寸越小，常见最小封装为 SOT-23-5，压降随之减小仅有几百mV，但是电流能力大大降低，散热能力大大减弱，温升系数达到 200℃/W以上，无法适应 5V 的工作电压，在该电压下发热将超标，甚至损坏电器。</p><p>虽然这个设计电源只供核心板使用，本想集成在核心板上，不得已单独执着电源模块。这样反而有好处：1.适应不同的电源，不同的电源用不同的电源模块。2.类似其他的核心板电源需求，也可以使用这种电源模块。</p><ol type="1"><li>5V 电源<ol type="1"><li><ahref="https://item.szlcsc.com/5967328.html">AMS1117-3.3</a>，满足要求，为150 ℃/W。2024年4月24日且价格便宜为 10+：0.24/个100+：0.21/个。压降典型值为 1.3V。<ol type="1"><li>满足 3.8 - 5V电源的需求。</li></ol></li></ol></li><li>3.3V 电源<ol type="1"><li>可以直连<ol type="1"><li>2.5V - 3.5V 的电压可以直连</li></ol></li><li><ahref="https://item.szlcsc.com/84106.html">ME6211C33M5G-N</a>，最大压降为260mV，满足设计要求，具体参考本博客文章<ahref="./20240416a.html#LDO">基础元器件-LDO</a>。2024年4月24日价格：10+：0.3100+：0.25。</li></ol></li></ol><p>后面会分为两个电源模块进行设计，5V的可以用在最小系统底板上，3.3V的可以用在1S 锂电 3.7V 电压电源的四旋翼上。</p><h2 id="原理图">原理图</h2><p>  查阅手册：</p><ol type="1"><li>STM32F103Cx 总共 48 个引脚，其中电源正极和电源负极总共 4 对，即 8个引脚；晶振占用 4 个引脚；因此最少引脚数为48-8-4+2=38个，两个2x10pin的板对板连接器即可。</li><li>除了 USB 以外全是低速信号线，PA11 和 PA12 固定作为 USB的引脚。</li><li>除了 BOOT0 还有 BOOT1。BOOT1 的引脚名为 PB2，PB2 固定作为 BOOT1功能。</li><li>正好空了两个引脚，和 3.3V、GND对应，防止板子插反方向，插反的话，核心板不工作，电源指示灯不亮。</li></ol><h2 id="pcb">PCB</h2><ol type="1"><li>准备好元器件手册</li><li>每个元器件都应该有 3D 模型</li></ol><p>布局、走线设计思路：</p><ol type="1"><li>查看芯片手册，了解各个引脚的功能。<ol type="1"><li>引脚复用，多个引脚构成一组功能，应该连续走线，不要分开成两个底座走线<ol type="1"><li>上下拆分较为合理分配：29-7一组，8-28一组。</li></ol></li><li>区分高速信号线和低速信号线。优先走高速信号线，只有 USB是高速信号线。</li></ol></li><li>晶振电路设计，额外增加 GND 包裹，用来屏蔽干扰。<ol type="1"><li>对于晶振走线等长，并没有很严格的要求，可以先更改网络名，跳过电阻，等长后在直线处替换电阻。</li></ol></li></ol><p>要求</p><ol type="1"><li>打板过孔最小内径为 0.3mm，最小外径为 0.4mm。</li></ol><p>设计过程：</p><ol type="1"><li>布局</li><li>联通走线</li><li>调整布局、更改线序</li><li>联通走线</li><li>调整丝印</li><li>设置原点，设置板子外形，更改板子形状</li><li>标注尺寸</li></ol><p>检查：</p><ol type="1"><li>是否 100% 联通</li><li>走线是否规范</li><li>电源检查、GND检查<ol type="1"><li>特别是线宽和过孔大小。</li></ol></li><li>元器件模型高度检查</li><li>间距检查，方便焊接</li></ol><p>额外工作</p><ol type="1"><li>添加丝印，如 logo、二维码</li><li>添加测试点<ol type="1"><li>电源正负极，加丝印</li><li>晶振输出（对于芯片是输入），加丝印</li></ol></li></ol><p>元器件 BOM</p><table style="width:100%;"><colgroup><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /></colgroup><thead><tr class="header"><th>分类</th><th>描述</th><th>标号</th><th>封装</th><th>数量</th><th>供应商1</th><th>供应商2</th><th>价格</th><th>购买数量</th><th>支出</th></tr></thead><tbody><tr class="odd"><td>贴片电容</td><td>100nF (104) 10% 50V</td><td>C1, C2, C3, C4</td><td>0603_C</td><td>4</td><td><ahref="http://www.szlcsc.com/product/details_15331.html">嘉立创</a>0.014</td><td></td><td>0.056</td><td>0</td><td>0</td></tr><tr class="even"><td>贴片电容</td><td>6pF (6R0) 0.25pF 50V</td><td>C5, C6</td><td>0603_C</td><td>2</td><td><ahref="http://www.szlcsc.com/product/details_38453.html">嘉立创</a>0.017</td><td></td><td>0.034</td><td>0</td><td>0</td></tr><tr class="odd"><td>贴片电容</td><td>16pF (160) 5% 50V</td><td>C7, C8</td><td>0603_C</td><td>2</td><td><ahref="http://www.szlcsc.com/product/details_1996.html">嘉立创</a>0.017</td><td></td><td>0.034</td><td>0</td><td>0</td></tr><tr class="even"><td>发光二极管</td><td>红灯 0603</td><td>D1</td><td>0603_LED_S1</td><td>1</td><td><ahref="http://www.szlcsc.com/product/details_2659.html">嘉立创</a>0.035</td><td><ahref="https://item.taobao.com/item.htm?spm=a1z0d.6639537/tb.1997196601.28.2f837484Q7YrnG&amp;id=732645214296">淘宝</a>0.02+3</td><td>0.035</td><td>100</td><td>5</td></tr><tr class="odd"><td>板对板连接器</td><td>M 20p 2x10p 0.5mm 7.2-3.62-2.2mm 3mm 50V 0.5A 50mΩ -30-80℃</td><td>H1, H2</td><td>SGD-05-M-020P-22</td><td>2</td><td><ahref="https://item.taobao.com/item.htm?id=675307456019&amp;scene=taobao_shop&amp;skuId=5028842742269&amp;spm=a1z10.1-c-s.w5003-25266276658.33.2cc66440jknhAW">淘宝</a>1+0.88</td><td></td><td>2</td><td>8</td><td>8.88</td></tr><tr class="even"><td>贴片电阻</td><td>0Ω (0R0) ±1%</td><td>R3, R4</td><td>0603_R</td><td>2</td><td><ahref="http://www.szlcsc.com/product/details_21903.html">嘉立创</a>0.0067</td><td></td><td>0.0134</td><td>0</td><td>0</td></tr><tr class="odd"><td>贴片电阻</td><td>1KΩ (1001) ±1%</td><td>R5</td><td>0603_R</td><td>1</td><td><ahref="http://www.szlcsc.com/product/details_21904.html">嘉立创</a>0.0063</td><td></td><td>0.0126</td><td>0</td><td>0</td></tr><tr class="even"><td>ARM</td><td>STM32F103CBT6</td><td>U1</td><td>LQFP-48_19.6_393_58X11_SMD</td><td>1</td><td><ahref="http://www.szlcsc.com/product/details_8796.html">嘉立创</a>9.83</td><td><ahref="https://item.taobao.com/item.htm?abbucket=13&amp;id=678711305104&amp;ns=1&amp;skuId=5045356419703&amp;spm=a21n57.1.item.6.60c7523criexMT">淘宝</a>3.6</td><td>3.6</td><td>5</td><td>18</td></tr><tr class="odd"><td>贴片晶振</td><td>32.768KHz ±20ppm 7pF</td><td>Y1</td><td>SMD-3215_2P FC - 135</td><td>1</td><td><ahref="http://www.szlcsc.com/product/details_49622.html">嘉立创</a>1.56</td><td><ahref="https://item.taobao.com/item.htm?abbucket=12&amp;id=753850636251&amp;ns=1&amp;skuId=5371113711623&amp;spm=a21n57.1.item.326.1a3f523cwPiWmR">淘宝</a>0.5+2</td><td>0.5</td><td>10</td><td>7</td></tr><tr class="even"><td>贴片晶振</td><td>8MHZ 12PF 10PPM</td><td>Y2</td><td>SMD-3225_4P</td><td>1</td><td><ahref="http://www.szlcsc.com/product/details_2777872.html">嘉立创</a>0.88</td><td><ahref="https://detail.tmall.com/item.htm?abbucket=12&amp;id=747734347715&amp;ns=1&amp;spm=a21n57.1.item.142.1a3f523cwPiWmR&amp;skuId=5157386133646">淘宝</a>0.5</td><td>0.5</td><td>10</td><td>5</td></tr></tbody></table><p>总计：0.56 + 0.034 + 0.034 + 0.02 + 2 + 0.0134 + 0.0126 + 3.47 +0.5+0.5 + 0 = 7 元。</p><p>其他颜色也得买，白、红、黄、蓝、绿，都买一百个：5 * 2 + 3 =13。母座也得买，12个共12元。13 + 12 + 8.8 + 18 + 7 + 5 + 0 = 63.8元。</p><p>打板：20 元。总计：83.8 元。2024年4月25日打板，并购买元器件。</p><h1 id="电源模块-1">电源模块</h1><h2 id="ams1117-3.3">AMS1117-3.3</h2><h2 id="me6211c33m5g-n">ME6211C33M5G-N</h2><h1 id="最小系统底板">最小系统底板</h1><h2 id="不同的-usb">不同的 USB</h2><h2 id="不同的-jtga">不同的 JTGA</h2>]]></content>
    
    
    <summary type="html">🍱本文记录自己STM32F103Cx最小系统设计的过程</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="电子电路" scheme="https://www.adunas.top/tags/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/"/>
    
    <category term="单片机" scheme="https://www.adunas.top/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="最小系统" scheme="https://www.adunas.top/tags/%E6%9C%80%E5%B0%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="STM32" scheme="https://www.adunas.top/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>电子电路：基础元器件</title>
    <link href="https://www.adunas.top/posts/20240416a.html"/>
    <id>https://www.adunas.top/posts/20240416a.html</id>
    <published>2024-04-16T02:50:15.000Z</published>
    <updated>2024-04-16T02:50:15.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<ahref="https://www.stmcu.com.cn/Product/pro_detail/PRODUCTSTM32/product">官网</a>。</li></ol></div><h1 id="电子电路导航"><ahref="./20240412a.html#基础元器件">电子电路导航</a></h1><h1 id="led">LED</h1><p>  LED 在电路上是必须加限流电阻的。因为电源常见电压有5V、3.3V。除了不同型号的 LED，不同颜色的 LED的电压也存在差别，这要特别注意。</p><p>  LED就是发光二极管，在电气特性和普通的二极管相同，即伏安特性是曲线不是线性的。计算限流电阻很简单，考虑LED的典型电流和电压，计算限流电阻的大小，然后选择一个相近的标称电阻即可。即使计算电阻为0，也不能省略限流电阻焊盘，因为实际电路板可能会与理论不同，或者更换 LED的颜色。</p><p>  所以手册上最重要的是看光电参数，在额定电流测试下的典型电压。</p><p>  如果是用芯片引脚控制LED灯，由于芯片引脚驱动能力弱，采用芯片端拉低通电，拉高断电，即LED 接 电源正极而不是地。</p><p>  电源电压不能无限升高，一般就到5V了。电压越高，限流电阻的功率越大，发热越大。</p><p>  限流电阻还需要考虑芯片引脚的电流承受能力。</p><p>  LED 额定最大电流一般为20mA，但是一般不用这个电流，其中有个原因是，额定电流的亮度很高，指示灯的时候，亮度可以低一点，而带产品壳子，灯罩以后，亮度会降低，又需要拔高亮度减小电阻大小。而裸机一般考虑电阻图方便选在1kΩ，因为经过计算一般在 100Ω以上。</p><p>  LED非常容易虚焊，导致接触不良，不够亮。表面材质容易机械损坏，不耐高温，要注意！</p><p>LED 用一个就好了，接通电源指示灯用。</p><h1 id="晶振">晶振</h1><p>  总是要区分有源晶振和无源晶振，而事实上，目前为止，我还没有使用过有源晶振。不讲的话容易弄混，其实很简单。</p><h2 id="无源晶振">无源晶振</h2><p>  无源晶振有两个引脚，不分正负极，内部就石英晶体，用来起振，起振电路来自芯片内部，都要配合两个合适的电容，以及中间的磁珠或者电感。而另外一种有四个引脚，这种并是把外围所需要的电阻电容放进去了，还是无源的，其中两个引脚起固定作用，内部没有任何连接；这种晶振和一些有源晶振的封装有点像，购买时看仔细。</p><p>  要根据数据手册，判断多的两个引脚是悬空还是接地，一般是接地，抗干扰。还要注意四个引脚的晶振的引脚顺序，到底哪两个引脚是晶振脚，不同的晶振可能是不同的。</p><h2 id="有源晶振">有源晶振</h2><p>  有源晶振就更好理解了，只用和控制器的晶振输入引脚，这一个引脚连接。它就是里面再集成了起振电路，需要单独供电，所以叫有源晶振，内部剖开就像集成电路一样。</p><p>有源晶振的设计不同，它的频率稳定性就不同，往往好于无源晶振，成本高适合高精度时钟要求。而消费级的，无源晶振够用了。</p><h1 id="无源晶振详解">无源晶振详解</h1><h2 id="基本参数">基本参数</h2><p>本文参考：<ahref="https://www.genuway.com/3287.html">关于不需要匹配外接电容的无源晶振电路说明</a>。</p><ol type="1"><li>负载电容 CL（LoadCapacitance）：准确地来说是期望负载电容，当实际负载电容越靠近负载电容，频率越接近标称频率，频偏越小。参看：<ahref="https://www.bilibili.com/video/BV18M4y1V7ek/?share_source=copy_web&amp;vd_source=6b55cb6788b1952e04c06b095d772810">【晶振的负载电容到底怎么选择？】</a>。</li><li>静态电容 <span class="math inline">\(C_0\)</span>（ShuntCapacitance）：归为杂散电容，不可忽略，一般有不到1pF大小。</li><li>动态电容 <span class="math inline">\(C_1\)</span>（MotionalCapacitance）：很小，可以忽略，一般是 fF 级别。1 fF = 10e-3 pF。</li></ol><p>一般会在晶振的两个引脚上加入电容：</p><ol type="1"><li>CG是无源晶振振荡电路输入管脚到GND的总电容（包括外置的CG电容、微乎其微的晶振引脚两部分）；</li><li>CD是晶体振荡电路输出管脚到GND的总电容（包括外置的CD电容、微乎其微的晶振引脚两部分）；</li><li>CS是杂散电容，包括：无源晶振两个管脚之间的静态电容静态电容 <spanclass="math inline">\(C_0\)</span>，IC芯片两个引脚的寄生电容，以及来自PCB的杂散电容。是其他电容的总和。</li></ol><p>为了让频偏很小，总电容要求如下：</p><p><span class="math display">\[CL = \frac{CG \cdot CD}{CG + CD} + CS\]</span></p><p>一般的，我们取 CG 和 CD 为两个想等的电容，所以上式化为：</p><p><span class="math display">\[CL = \frac{C_{L0}}{2} + CS\]</span></p><p>  一般微控制器的手册有相应要求，按照手册实行即可。但是因为寄生电路的不确定性，在PCB实际设计中最好还是为CG/CD预留位置。例如STM32F103x 的电路设计：<ahref="https://www.stmcu.com.cn/Designresource/detail/document/696086">数据手册</a>第53-56页、<ahref="https://www.st.com/content/ccc/resource/technical/document/application_note/c6/eb/5e/11/e3/69/43/eb/CD00221665.pdf/files/CD00221665.pdf/jcr:content/translations/en.CD00221665.pdf">电路设计参考</a>。具体的设计过程可以查看我的博客<ahref="./20240416b.html">STM32最小系统设计</a>。</p><p>  PCB走线、布局等的杂散电容，以及温漂等因素，导致了频偏，所以长时间RTC实时时钟会偏差。芯片的时钟基准就来自晶振。分频或者倍频后按照频率基准运算干活。</p><h1 id="ldo">LDO</h1><p>  线性稳压。原理：输出反馈电路给放大器，调节 PMOS从而稳定电压。等效于滑动变阻器，压降产生的功率全部转化为热量。由于压差较小，功率较低，纹波较小，非常适合给功耗不高的芯片供电。</p><p>基础参数</p><ol type="1"><li>输入电压范围</li><li>输出电压</li><li>工作电流</li><li>纹波：电源的稳定性</li></ol><p>重要参数：</p><ol type="1"><li>结温，最大耐受温度一般为 125℃。质量差的只有85 ℃。</li><li>Junction-to-ambient thermal resistance 热阻参数，单位为℃/W。表示损耗功率转化为温升的系数。热阻参数与封装类型有极大关系，以及PCB布局有关，由手册给出的计算即可。若手册中无此参数，建议选择其他品牌和型号的LDO。比如室温 25℃，输入电压5V，输出电压3.3V，电流为500mA，热阻为90℃/W，则芯片温度将达到：25+90<em>((5-3.3)</em>0.5)=101.5℃，显然，即使没有超过额定电压和电流，温度可能会超过结温，损坏LDO。</li><li>Dropout Voltage压降。输入和输出的最小电压差，若想稳定输出电压值不变，输入电压必须大于输出电压+压差。当输入电压小于这个值时，输出电压会随着输入电压的降低而降低。手册不会给所有的电流下的压降，一般的，电流越大，压差就越高；所以在实际比手册电流低的情况下，保证压差满足即可。<ol type="1"><li>值得注意的是，芯片的额定电压为 3.3V，但是其工作电压是相对宽泛的，如2.4V到3.6V。此时就可以利用LDO特性，接一个3.3V或者5V的电源都能正常工作。这也是使用LDO的一个重要目的之一。</li></ol></li></ol><p>焊接注意：</p><ol type="1"><li>远离其他热源。</li></ol><h2 id="sot-23-5封装">SOT-23-5封装</h2><p>  这种封装一般是低压差，小电流的时候，要不然散热根本跟不上，想都不用想，只能是低压差小电流。比如说1S 锂电，电压为 3.7V，稳压到 3.3V。温升计算大约公式为：<spanclass="math inline">\(0.5 \cdot I \cdot温升系数\)</span>。这种封装温升系数在 200 出头，最多 300 ℃/W。按照升温50摄氏度。50÷300÷0.5=0.33A，大概300多mA的电流也能承受。此时即使没有温升系数也可选购。</p><h3 id="德州仪器">德州仪器</h3><table style="width:100%;"><colgroup><col style="width: 16%" /><col style="width: 16%" /><col style="width: 16%" /><col style="width: 16%" /><col style="width: 16%" /><col style="width: 16%" /></colgroup><thead><tr class="header"><th>型号</th><th>最大电流</th><th>压降</th><th>温升系数℃/W</th><th>价格</th><th>购买链接</th></tr></thead><tbody><tr class="odd"><td><a href="https://www.ti.com/cn/lit/gpn/tps709">TPS70933DBVR</a></td><td>150mA</td><td>1.4 V</td><td>212.1</td><td>5+：1.5 50+：1.18</td><td><a href="https://item.szlcsc.com/90527.html">链接</a></td></tr><tr class="even"><td><ahref="https://www.ti.com/cn/lit/gpn/tlv755p">TLV75533PDBVR</a></td><td>0.5A</td><td>238-325 mV</td><td>231.1</td><td>5+：1.5 50+：1.2</td><td><a href="https://item.szlcsc.com/391018.html">链接</a></td></tr><tr class="odd"><td><ahref="https://www.ti.com/cn/lit/gpn/tlv757p">TLV75733PDBVR</a></td><td>1A</td><td>475-650 mV</td><td>231.1</td><td>5+：1.42 50+：1.16</td><td><a href="https://item.szlcsc.com/493903.html">链接</a></td></tr></tbody></table><p>压降考虑的是输入电压在 2.5V到额定最大电压之间，电流为最大额定电流。注意：输入电压越小，压降越大、输出电流越大，压降越大。价格2024年4月24日。</p><h3 id="microne南京微盟">MICRONE(南京微盟)</h3><table><colgroup><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /></colgroup><thead><tr class="header"><th>型号</th><th>最大电流</th><th>压降</th><th>温升系数℃/W</th><th>价格</th></tr></thead><tbody><tr class="odd"><td><a href="https://item.szlcsc.com/84106.html">ME6211C33M5G-N</a></td><td>500mA</td><td>260 mV</td><td>没给</td><td>10+：0.3 100+：0.25</td></tr></tbody></table><p>压降为电流是200 mA。价格2024年4月24日。</p><h3 id="richtek立锜">RICHTEK(立锜)</h3><table><colgroup><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /></colgroup><thead><tr class="header"><th>型号</th><th>最大电流</th><th>压降</th><th>温升系数℃/W</th><th>价格</th></tr></thead><tbody><tr class="odd"><td><a href="https://item.szlcsc.com/16332.html">RT9193-33GB</a></td><td>300mA</td><td>300 mV</td><td>250</td><td>5+：0.71 50+：0.59</td></tr><tr class="even"><td><a href="https://item.szlcsc.com/48778.html">RT9013-33GB</a></td><td>500mA</td><td>400 mV</td><td>250</td><td>5+：1.05 50+：0.85</td></tr></tbody></table><p>压降为电流是额定值。价格2024年4月24日。</p><h1 id="板对板连接器">板对板连接器</h1><ol type="1"><li>HRS广濑连接器https://www.hirose.com/zh/product/series?category=Board-to-Board-Board-to-FPC_Mezzanine-Connection</li><li>TXGA连接器 https://www.txga.com/m18series/FBB04009-M.html</li><li>得捷电子 JST 连接器，没卖的？https://www.jst-mfg.com/</li><li>松下连接器https://device.panasonic.cn/ac/c/dl/cad/index.jsp?series_cd=1293<ol type="1"><li>买过 AXK5F80547YG</li></ol></li><li>中国星坤 https://www.helloxkb.com/Home/Goods/goodsList/id/21.html<ol type="1"><li>这家店和国外的店，如松下，广濑价格没有优势</li><li>2024年4月20日官网很多器件手册和资料、图片都空的</li></ol></li><li>Molex莫仕https://www.molex.com/zh-cn/products/connectors/board-to-board-connectors</li><li>YXT(益鑫通)http://www.yxt-pretech.com/官网上不给图纸，不予考虑。</li><li>其他<ol type="1"><li>https://www.digikey.cn/</li></ol></li><li>淘宝这家，官网垃圾，但是客服给力啊，资料都给、价格便宜：深圳山谷道连接器。</li></ol><p>连接器很难具有完全替代性。因为引脚一样，但是固定孔可能不同。配对口可能不同。</p><p>常见类型</p><p>最少10pin（2x5）（没卖的）。0.8mm * 5mm（引脚*组装高度）</p><p>0.5mm* 2、0.5mm*3mm，QFP 封装芯片引脚的间距就是 0.5mm。</p><p>根据计算，这个单片机 48个引脚，去除电源总计9个，和4个晶振引脚，总计35个，再额外加至少一对电源，所以用 20 pin 用两个够用。</p><h2 id="pin-05mm">20pin 05mm</h2><ol type="1"><li>深圳山谷道连接器<ol type="1"><li>定位孔 2 个</li><li>安装有方向</li><li>5.2 1.6 2 4.6 3.6</li></ol></li><li>松下<ol type="1"><li>无</li><li>安装有方向</li><li>公母推荐焊盘不同</li></ol></li></ol><p>本来还想兼容多种座子的，确实有工作量，且宽度有不同，工作量大，没必要。这次就用山谷道。</p><p>连接器有个很容易出错的问题，就是镜像问题。一旦搞错，会出现板子的方向问题出错、线序出错等严重低级错误。特别是是否对称。设计准则是：</p><ol type="1"><li>原理图上公母引脚1to1，2to2···</li><li>这个好像是对称的，即旋转180°仍然能放进去，尊崇手册里的方向，即装配好是固定点重合</li><li>PCB板画好箭头方向，重合即可。</li><li>母座为顺序，改公座的封装引脚顺序。</li></ol><p>连接器接线准则：</p><ol type="1"><li>芯片引脚复用，即除了基本普通的IO口，还复用其他值，经常存在几个引脚成对复用。<ol type="1"><li>相邻的同符号脚可能存在同功能组（如IIC），相邻边中间隔了电源也算相邻。如 PA3、PA4。</li><li>相邻的不同符号脚不存在同功能组，如PA8、PB0。</li><li>成对复用应优先保证等长。</li></ol></li><li>观察发现，芯片不用旋转45°，而是横竖中间拆分比较合适，而上下结构连接器，正好覆盖两个角，像个宝盖头一样。</li></ol>]]></content>
    
    
    <summary type="html">🍦本文记录基础元器件的笔记</summary>
    
    
    
    <category term="电子电路" scheme="https://www.adunas.top/categories/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/"/>
    
    
    <category term="电子元器件" scheme="https://www.adunas.top/tags/%E7%94%B5%E5%AD%90%E5%85%83%E5%99%A8%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>电子电路：STM32单片机</title>
    <link href="https://www.adunas.top/posts/20240412b.html"/>
    <id>https://www.adunas.top/posts/20240412b.html</id>
    <published>2024-04-12T09:22:34.000Z</published>
    <updated>2024-04-12T09:22:34.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b6c1cc6d84c85d1285a4a5d9d1764097a14c3490ce56715515d68f3dedfa27b3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🍦本文记录STM32单片机的选型</summary>
    
    
    
    <category term="电子电路" scheme="https://www.adunas.top/categories/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/"/>
    
    
    <category term="单片机" scheme="https://www.adunas.top/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="微控制器" scheme="https://www.adunas.top/tags/%E5%BE%AE%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>电子电路导航</title>
    <link href="https://www.adunas.top/posts/20240412a.html"/>
    <id>https://www.adunas.top/posts/20240412a.html</id>
    <published>2024-04-12T09:13:40.000Z</published>
    <updated>2024-04-12T09:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章导航总览"><ahref="./20240221a.html#电子电路">文章导航总览</a></h1><h1 id="电子元器件">电子元器件</h1><h2 id="基础元器件"><a href="./20240416a">基础元器件</a></h2><h1 id="意法半导体">意法半导体</h1><h2 id="stm32单片机"><a href="./20240412b.html">STM32单片机</a></h2>]]></content>
    
    
    <summary type="html">🥧本文是电子电路分类的导航</summary>
    
    
    
    <category term="文章导航" scheme="https://www.adunas.top/categories/%E6%96%87%E7%AB%A0%E5%AF%BC%E8%88%AA/"/>
    
    
    <category term="文章导航" scheme="https://www.adunas.top/tags/%E6%96%87%E7%AB%A0%E5%AF%BC%E8%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>日程表：2024年04月</title>
    <link href="https://www.adunas.top/posts/20240411a.html"/>
    <id>https://www.adunas.top/posts/20240411a.html</id>
    <published>2024-04-11T03:52:28.000Z</published>
    <updated>2024-04-11T03:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章导航总览"><ahref="./20240221a.html#2024年4月">文章导航总览</a></h1><h1 id="年4月11日">2024年4月11日</h1><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>运动1小时</p>            </div><ul class="task-list"><li><label><input type="checkbox" />四旋翼发板、元器件购买</label></li></ul><div class='checkbox red'><input type="checkbox" />            <p>写一篇阅读论文的博客</p>            </div><details class="folding-tag" blue><summary> 日程表 </summary>              <div class='content'>              <div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>时间轴</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>11点54分-16点15分</p></div></div><div class="timeline-item-content"><ol type="1"><li>四旋翼资料查找</li></ol></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>17点45分-19点03分</p></div></div><div class="timeline-item-content"><ol type="1"><li>四旋翼资料查找</li></ol></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>20点48分-23点59分</p></div></div><div class="timeline-item-content"><ol type="1"><li>微信小程序</li></ol></div></div></div>              </div>            </details><h1 id="年4月12日">2024年4月12日</h1><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>运动1小时</p>            </div><ul class="task-list"><li><label><input type="checkbox" />四旋翼发板、元器件购买</label></li></ul><div class='checkbox red'><input type="checkbox" />            <p>写一篇阅读论文的博客</p>            </div><details class="folding-tag" blue><summary> 日程表 </summary>              <div class='content'>              <div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>时间轴</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>00点00分-02点35分</p></div></div><div class="timeline-item-content"><ol type="1"><li>微信小程序</li></ol></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>09点13分-12点15分</p></div></div><div class="timeline-item-content"><ol type="1"><li>微信小程序</li></ol></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>13点46分-18点53分</p></div></div><div class="timeline-item-content"><ol type="1"><li>四旋翼</li></ol></div></div></div>              </div>            </details>]]></content>
    
    
    <summary type="html">🥐本文记录 Adunas 2024年04月的日程安排和实施情况</summary>
    
    
    
    <category term="日程表" scheme="https://www.adunas.top/categories/%E6%97%A5%E7%A8%8B%E8%A1%A8/"/>
    
    
    <category term="日程表" scheme="https://www.adunas.top/tags/%E6%97%A5%E7%A8%8B%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Doxygen</title>
    <link href="https://www.adunas.top/posts/20240403a.html"/>
    <id>https://www.adunas.top/posts/20240403a.html</id>
    <published>2024-04-03T00:51:35.000Z</published>
    <updated>2024-04-06T07:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程导航"><a href="./20240221b.html#Doxygen">编程导航</a></h1><h1 id="学习目的">学习目的</h1><p>  doxygen是非常重要的代码阅读工具。按照一定的规范书写注释，能够快速帮助我们阅读代码。</p><h1 id="语法">语法</h1><p>  参考这个<ahref="https://www.bilibili.com/video/BV1ZE411F7kW/?p=4&amp;share_source=copy_web&amp;vd_source=6b55cb6788b1952e04c06b095d772810">【AXin带你学Doxygen生成文档超简单！】</a>视频学习基本语法。</p><p>  实体，是指函数、变量等对象。是我们要注释的对象。</p><p>  注释的格式有很多种。统一采用 C++ 的注释格式，比较熟悉方便。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 注释内容</span></span><br></pre></td></tr></table></figure><p>为了方便阅读，不省略参数标志。</p><h1 id="常用参数">常用参数</h1><h2 id="brief">brief</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @brief 简要的描述</span></span><br></pre></td></tr></table></figure><h2 id="details">details</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @details 详细的描述</span></span><br></pre></td></tr></table></figure><h2 id="see">see</h2><p>  当函数名和其他函数名一致时，点击生成的 doxygen网页能够实现实现跳转。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @see [函数名]</span></span><br></pre></td></tr></table></figure><h2 id="param">param</h2><p>  当参数名和其他参数名一致时，生成的 doxygen 网页会高亮。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 函数注释</span></span><br><span class="line"><span class="comment">/// @param [参数名] 参数简述</span></span><br></pre></td></tr></table></figure><h2 id="return">return</h2><p>  当变量名和其他变量名一致时，点击生成的 doxygen网页能够实现实现跳转。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @return [变量名]</span></span><br></pre></td></tr></table></figure><h2 id="提示">提示</h2><p>  不同级别的提示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @note 记录</span></span><br><span class="line"><span class="comment">/// @attention  注意</span></span><br><span class="line"><span class="comment">/// @warning 警告</span></span><br></pre></td></tr></table></figure><h2 id="在实体之后注释">在实体之后注释</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///&lt; 变量1注释</span></span><br><span class="line"><span class="comment">///&lt; 变量2注释</span></span><br></pre></td></tr></table></figure><h1 id="源文件和头文件">源文件和头文件</h1><p>  头文件存放了一些声明函数，起到接口作用。不同的源文件可能都会调用头文件里的函数，因此头文件具有一定的“公共属性”。所以将简要的说明和必要的参数放在头文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @brief 函数注释</span></span><br><span class="line"><span class="comment">/// @param [参数名] </span></span><br><span class="line"><span class="comment">/// @return [变量名]</span></span><br></pre></td></tr></table></figure><p>  源文件中的函数是具体算法的实现，有时我们会更改算法，提示和说明就会产生变动。所以将详细的说明和提示放在源文件。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @details 详细的描述</span></span><br><span class="line"><span class="comment">/// @see [函数名]</span></span><br><span class="line"><span class="comment">/// @note 注释 </span></span><br><span class="line"><span class="comment">/// @attention 注意 </span></span><br><span class="line"><span class="comment">/// @warning 警告 </span></span><br><span class="line"><span class="comment">///&lt; 变量1注释</span></span><br></pre></td></tr></table></figure><h1 id="生成方法">生成方法</h1><p>  用图形化界面生成。</p><h2 id="工作目录">工作目录</h2><p>  存放项目配置文件。</p><h2 id="wizard向导">Wizard：向导</h2><p>  基础配置。包含源文件地址、是否递归（所有文件夹检索）、输出文件夹等。</p><h3 id="工程">工程</h3><p>  一定要选择递归，检索所有子文件。</p><h3 id="模式">模式</h3><ol type="1"><li>一定要选择所有实体，要不然网页可能不会显示文件。</li><li>选择对应的编程语言。</li></ol><h3 id="输出">输出</h3><p>  可以选择关闭 LaTex 文件输出。</p><h3 id="图表">图表</h3><p>  选择 GraphViz，打上所有勾，需要安装 GraphViz软件，就能自动绘制函数和文件调用关系图。</p><h2 id="expert专家">Expert：专家</h2><p>  高级配置。包含 Html 设置。是完包含 Wizard 中的设置，并大于Wizard。</p><h3 id="工程-1">工程</h3><p>  可以设置语言为中文。</p><h3 id="source-browser">Source Browser</h3><p>  源码设置。</p><ol type="1"><li>SOURCE_BROWSER：显示实体函数所在位置，这个要勾选。</li><li>INLINE_SOURCES；嵌入源码，不要勾选。太影响阅读了。</li></ol><h3 id="网页">网页</h3><p>  目录栏，横向换纵向：<code>DISABLE_INDEX</code> 和<code>GRNERATE_TREEVIEW</code> 打勾。</p><h3 id="dot语言">Dot语言</h3><p>  DOT语言是一种文本图形描述语言。我们用 GraphViz 软件。</p><p>DOT_PATH：dot.exe 文件的路径，在 GraphViz 软件安装的位置下的 bin里。如果 GraphViz 已经添加了全局变量，这个就不用设置。</p><h2 id="run运行">Run：运行</h2><p>  运行和跳转网页。</p>]]></content>
    
    
    <summary type="html">🥯本文为 Doxygen 的教程和学习笔记</summary>
    
    
    
    <category term="编程" scheme="https://www.adunas.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Doxygen" scheme="https://www.adunas.top/tags/Doxygen/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.adunas.top/posts/20240330a.html"/>
    <id>https://www.adunas.top/posts/20240330a.html</id>
    <published>2024-03-30T03:58:23.000Z</published>
    <updated>2024-03-30T03:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程导航"><a href="./20240221b.html#个人笔记">编程导航</a></h1><h1 id="字符编码">字符编码</h1><ol type="1"><li>汉字字符：<code>[\u4e00-\u9fa5]</code></li></ol><h1 id="前后字符">前后字符</h1><h2 id="必须为">必须为</h2><p>  没找到，但是可以直接匹配呀，然后再整体替换，例如<code>a123b 123</code> 替换为 <code>ab 123</code> 。</p><h2 id="不能为">不能为</h2><ol type="1"><li>前面：<code>(?&lt;![A-Za-z0-9])n</code>。字母 n前面不能为数字和字母。</li><li>后面：<code>n(?![A-Za-z0-9])</code>。字母 n后面不能为数字和字母。</li></ol><h1 id="匹配字符不能为">匹配字符不能为</h1><p>  匹配非汉字且非英文字母：<code>[^\u4e00-\u9fa5a-zA-Z]</code>。</p><h1 id="删除编号">删除编号</h1><p>  删除编号：<code>#\s[0-9](\s|\.([0-9](\s|\.[0-9]\s)))</code></p><pre>"#\s[0-9](\s|\.([0-9](\s|\.[0-9]\s)))" => <a href="#learn-regex"><strong># 1 </strong></a>基本匹配=> #<a href="#learn-regex"><strong># 2.1 </strong></a>点运算符 `.`=> ##<a href="#learn-regex"><strong># 2.2.1 </strong></a>否定字符集</pre><p>变式：<code>#\s[0-9].(\s|([0-9](\s|\.[0-9]\s)))</code>，不规范的编号格式示例。</p><pre>"#\s[0-9].(\s|([0-9](\s|\.[0-9]\s)))" => <a href="#learn-regex"><strong># 1. </strong></a>基本匹配=> #<a href="#learn-regex"><strong># 2.1 </strong></a>点运算符 `.`=> ##<a href="#learn-regex"><strong># 2.2.1 </strong></a>否定字符集</pre><h1 id="匹配变量">匹配变量</h1><p>  在程序中，我们经常要批量修改变量，如变量 <code>n</code>但是不想修改其他含有 n字符的变量等其他符号元素，方法为：<code>\sn(?![a-z])</code></p><pre>"\sn(?![a-z])" => int<a href="#learn-regex"><strong> n</strong></a> = sizeof(nums); printf("Hello!\n"); if (n == 10){a = 0;}</pre><pre>"\(n(?![a-z])" => int n = sizeof(nums); printf("Hello!\n"); if <a href="#learn-regex"><strong>(n</strong></a> == 10){a = 0;}</pre>]]></content>
    
    
    <summary type="html">🍤本文是正则表达式的个人笔记</summary>
    
    
    
    <category term="编程" scheme="https://www.adunas.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="正则表达式" scheme="https://www.adunas.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C语言：进阶篇</title>
    <link href="https://www.adunas.top/posts/20240328a.html"/>
    <id>https://www.adunas.top/posts/20240328a.html</id>
    <published>2024-03-28T13:31:08.000Z</published>
    <updated>2024-04-01T03:06:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程导航"><a href="./20240221b.html#进阶篇">编程导航</a></h1><h1 id="格式化字符串">格式化字符串</h1><p>  将不同类型的变量放到一个字符串里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;    </span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(str, <span class="string">&quot;%d, %lf, %c&quot;</span>, a, b, c);</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><h1 id="动态内存分配">动态内存分配</h1><p>  malloc函数是动态内存分配函数，使用数组和指针的时候可以用到。目的是，初始化数组时会占用一定的内存，而为了保证数组能兼容多种情况，初始化的长度往往很大，容易造成浪费，这时就可以利用动态内存分配函数，用多少给多少。但是分配的内存的数组用完了以后要及时清理，否则会堆积。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 引入标准库stdlib.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">// 或者引入库 malloc.h</span></span><br><span class="line"><span class="comment">// #include &lt;malloc.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分配动态内存</span></span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span>* p = <span class="literal">NULL</span>,* q = <span class="literal">NULL</span>;</span><br><span class="line">    p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*p) * n);</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    <span class="comment">//int* p = malloc(sizeof(*p) * n);</span></span><br><span class="line">    <span class="comment">//signed int* q = NULL;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//地址备份</span></span><br><span class="line">        q = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">signed</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i = i + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *p = -i;</span><br><span class="line">            p = p + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印输出</span></span><br><span class="line">        p = q;</span><br><span class="line">        p = p + <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;指针指向的值为：%d\n&quot;</span>, *p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理动态内存</span></span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清理</span></span><br><span class="line">    p = <span class="literal">NULL</span>; q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><p>在清理动态内存的时候，就会把这一段内存里的所有数据初始化，指针地址不变。清理动态内存需要让指针指向最开始定义时的地址，所以对地址进行了备份。</p><p>增加了判断函数，判断是否成功分配内存空间，使程序更加严谨。</p>]]></content>
    
    
    <summary type="html">🍪本文为 C 语言进阶的教程和学习笔记</summary>
    
    
    
    <category term="编程" scheme="https://www.adunas.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C" scheme="https://www.adunas.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>计算机原理</title>
    <link href="https://www.adunas.top/posts/20240325a.html"/>
    <id>https://www.adunas.top/posts/20240325a.html</id>
    <published>2024-03-25T03:05:02.000Z</published>
    <updated>2024-03-25T03:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程导航"><ahref="./20240221b.html#计算机原理">编程导航</a></h1><h1 id="栈">栈</h1><p>  程序运行时会产生一些中间变量，尤其是调用函数时，往往会调用多个函数，在此期间就会产生临时存储的参数，而cpu的内存是远远不够的，这个时候需要调用一个速度快且容量大的存储空间，此时运行内存就非常合适。栈就是存放货物仓库的意思。根据函数参数存储的需求，要求存储的数据是先进先出，后进后出的。这就很好理解了。</p>]]></content>
    
    
    <summary type="html">🥯本文为 计算机原理 的教程和学习笔记</summary>
    
    
    
    <category term="编程" scheme="https://www.adunas.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="计算机原理" scheme="https://www.adunas.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C语言：基础篇</title>
    <link href="https://www.adunas.top/posts/20240324a.html"/>
    <id>https://www.adunas.top/posts/20240324a.html</id>
    <published>2024-03-24T04:26:20.000Z</published>
    <updated>2024-04-01T03:06:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程导航"><a href="./20240221b.html#基础篇">编程导航</a></h1><h2 id="标准输入输出">标准输入输出</h2><p>  “stdio” 的全称是 “standard input/output”，表示标准输入输出，例如“printf” 打印函数就需要该头文件，这是最基本的头文件，必须要调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="return和exit">return和exit</h1><p>  exit 是强制结束运行的程序，清理进程。return是返回函数，返回设定的参数，如果是在主函数里使用，返回值将给 exit。</p><h1 id="打印">打印</h1><p>  打印不同的类型的值，符号是不同的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//有符号整型</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> a = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//无符号整型</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> b = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有符号整型：%d，无符号整型：%u\n&quot;</span>, a, b);</span><br><span class="line">    <span class="comment">//浮点型</span></span><br><span class="line">    <span class="type">double</span> c = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//字符型</span></span><br><span class="line">    <span class="type">char</span> d = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;浮点型：%lf，字符型：%c\n&quot;</span>, c, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><h2 id="不要使用该方法">不要使用该方法</h2><p>  一行一行地打印，不要每次只打印几个字符。这样会拖慢整个运行效率，占用资源，并可能出现故障。禁止使用以下方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组下标为：[&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i = i + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确的方法是转化为字符串，然后打印：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>] = <span class="string">&quot;数组下标为：[&quot;</span>;</span><br><span class="line">    <span class="type">char</span> temp[<span class="number">20</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i = i + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(temp, <span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(temp, <span class="string">&quot;%d, &quot;</span>, a + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">strcat</span>(str, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(str, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><h1 id="字符和字符串">字符和字符串</h1><p>  字符变量是由 ASCII 码对应的二进制数存在内存里的。ASCII码可以表示基础的符号、数字和字母，占一个字节；汉字的编码占两个字节。字符串就是字符数组，字符串结尾含一个结束符。</p><h2 id="头文件">头文件</h2><p>  操作字符串使用的库函数为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>这是必须添加的。</p><h1 id="指针">指针</h1><h2 id="易错点1">易错点1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> arry[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span>* p;</span><br><span class="line">    p = arry;</span><br><span class="line">    <span class="comment">//打印第一个和第二个元素</span></span><br><span class="line">    <span class="comment">//错误写法</span></span><br><span class="line">    <span class="comment">// printf(&quot;数组下标为：%u %u\n&quot;, *ans, *ans + 1);</span></span><br><span class="line">    <span class="comment">//正确写法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组下标为：%u %u\n&quot;</span>, *ans, *(ans + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><h2 id="易错点2">易错点2</h2><p>  初始化两个指针容易出现错误，导致第二个不是指针而是变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//错误写法</span></span><br><span class="line">    <span class="comment">// signed int* p = NULL, q = NULL;</span></span><br><span class="line">    <span class="comment">//正确写法</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span>* p = <span class="literal">NULL</span>,* q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><h2 id="数组和指针">数组和指针</h2><h3 id="等价关系">等价关系</h3><p>  变量和数组是等价的。但是还是有细微区别。</p><p>  考虑一种情况：</p><table><thead><tr class="header"><th>数学符号</th><th>代码变量</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(A\)</span></td><td>signed int A[] = { 1, 2, 3, 4, 5 }</td><td>给定矩阵</td></tr><tr class="even"><td><span class="math inline">\(N_A\)</span></td><td>unsigned int N_A</td><td>元素个数（矩阵计算）</td></tr><tr class="odd"><td>-</td><td>signed int* p = A</td><td>矩阵指针</td></tr><tr class="even"><td><span class="math inline">\(N_p\)</span></td><td>unsigned int N_p</td><td>元素个数（指针计算）</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> A[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//元素个数计算</span></span><br><span class="line">    <span class="comment">//矩阵法</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> N_A = <span class="keyword">sizeof</span>(A) / <span class="keyword">sizeof</span>(A[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//或者将 sizeof(A[0]) 写成 sizeof(signed int)，与数组元素变量定义保持一致即可</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;矩阵计算的元素个数为： %d\n&quot;</span>, N_A);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针法</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span>* p = A;</span><br><span class="line">    <span class="comment">//下面一行是错误的计算方法，因为用指针表示后，*p 指向数组当前元素，计算指针的长度就是当前元素的长度而不是数组的长度。</span></span><br><span class="line">    <span class="comment">//signed int N_p = sizeof(*p) / sizeof(signed int);</span></span><br><span class="line">    <span class="comment">//==========下面的方法也是错误的==========</span></span><br><span class="line">    <span class="comment">//对于指针指向的数组元素超出最后一个时，该地址内的值是随机的。只可能在像字符串数组中含结束符号的元素数组中使用。</span></span><br><span class="line">    <span class="comment">/*unsigned int N_p = 0;</span></span><br><span class="line"><span class="comment">    while (*p != NULL) &#123;</span></span><br><span class="line"><span class="comment">        p++;</span></span><br><span class="line"><span class="comment">        N_p = N_p + 1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;指针计算的元素个数为： %d\n&quot;, N_p);*/</span></span><br><span class="line">    <span class="comment">//========================================</span></span><br><span class="line">    <span class="comment">//总结：指针法是无效的，这里就充分地看出了数组和指针地区别</span></span><br><span class="line">    <span class="comment">//正确地做法是用数组计算元素个数，作为参数进行传递</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><h3 id="符号类型">符号类型</h3><p>  数组和指针本身都是无符号整型的。而定义数组时定义的类型是指定元素的类型。同理定义指针的类型是定义指针指向的地址内值的类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> C[<span class="number">2</span>] = &#123; <span class="number">-1</span>,<span class="number">2</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>* p = C;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组显示第一个元素为： %d，指针显示第一个元素为： %d\n&quot;</span>, C[<span class="number">0</span>], *p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p><p>上面定义的数组是有符号整型，指针是无符号整型，指针指向的内存地址内的值不发生改变，但是指针无符号是没有负数的，所有都会显示一个正数。</p><h1 id="数组函数">数组函数</h1><p>  数组不能作为函数变量返回，但是可以返回数组的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title function_">Array</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a, <span class="type">signed</span> <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>* ans;</span><br><span class="line">    ans = Array(nums, n, target);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;矩阵计算的元素个数为： %d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* <span class="title function_">Array</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a, <span class="type">signed</span> <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//返回数组下标</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> C[<span class="number">2</span>] = &#123; i,j &#125;;</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><ahref="https://tool.lu/coderunner/embed/eFz.html">点击测试代码</a></p>]]></content>
    
    
    <summary type="html">🥯本文为 C 语言基础的教程和学习笔记</summary>
    
    
    
    <category term="编程" scheme="https://www.adunas.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C" scheme="https://www.adunas.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统教程：Kali</title>
    <link href="https://www.adunas.top/posts/20240319d.html"/>
    <id>https://www.adunas.top/posts/20240319d.html</id>
    <published>2024-03-18T16:21:04.000Z</published>
    <updated>2024-03-18T16:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<a href=""></a>。</li></ol></div><h1 id="系统软件导航"><ahref="./20240317b.html#Kali">系统软件导航</a></h1>]]></content>
    
    
    <summary type="html">🍰本文记录操作系统 Kali 的使用技巧</summary>
    
    
    
    <category term="系统软件" scheme="https://www.adunas.top/categories/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="软件教程" scheme="https://www.adunas.top/tags/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/"/>
    
    <category term="Kali" scheme="https://www.adunas.top/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>工程实践：移动端应用程序</title>
    <link href="https://www.adunas.top/posts/20240319c.html"/>
    <id>https://www.adunas.top/posts/20240319c.html</id>
    <published>2024-03-18T16:14:03.000Z</published>
    <updated>2024-03-18T16:14:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<a href=""></a>。</li></ol></div><h1 id="工程实践导航"><ahref="./20240318zf.html#移动端应用程序">工程实践导航</a></h1>]]></content>
    
    
    <summary type="html">🍱本文记录自己学习设计移动端应用程序的过程</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="应用程序" scheme="https://www.adunas.top/tags/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>工程实践：传感器物联网</title>
    <link href="https://www.adunas.top/posts/20240319b.html"/>
    <id>https://www.adunas.top/posts/20240319b.html</id>
    <published>2024-03-18T16:10:42.000Z</published>
    <updated>2024-03-18T16:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<a href=""></a>。</li></ol></div><h1 id="工程实践导航"><ahref="./20240318zf.html#传感器物联网">工程实践导航</a></h1>]]></content>
    
    
    <summary type="html">🍱本文记录自己学习搭建传感器物联网的过程</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="传感器" scheme="https://www.adunas.top/tags/%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    
    <category term="物联网" scheme="https://www.adunas.top/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>工程实践：图像识别</title>
    <link href="https://www.adunas.top/posts/20240319a.html"/>
    <id>https://www.adunas.top/posts/20240319a.html</id>
    <published>2024-03-18T16:08:40.000Z</published>
    <updated>2024-03-18T16:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<a href=""></a>。</li></ol></div><h1 id="工程实践导航"><ahref="./20240318zf.html#图像识别">工程实践导航</a></h1>]]></content>
    
    
    <summary type="html">🍱本文记录自己学习图像识别的过程</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="自动化" scheme="https://www.adunas.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="图像识别" scheme="https://www.adunas.top/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>工程实践：GNSS接收机</title>
    <link href="https://www.adunas.top/posts/20240318zj.html"/>
    <id>https://www.adunas.top/posts/20240318zj.html</id>
    <published>2024-03-18T06:46:23.000Z</published>
    <updated>2024-03-18T06:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<a href=""></a>。</li></ol></div><h1 id="工程实践导航"><ahref="./20240318zf.html#GNSS接收机">工程实践导航</a></h1>]]></content>
    
    
    <summary type="html">🍱本文记录自己学习制作GNSS接收机的过程</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="导航" scheme="https://www.adunas.top/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="自动化" scheme="https://www.adunas.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="GNSS接收机" scheme="https://www.adunas.top/tags/GNSS%E6%8E%A5%E6%94%B6%E6%9C%BA/"/>
    
    <category term="人工智能" scheme="https://www.adunas.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>工程实践：PCB焊接技巧</title>
    <link href="https://www.adunas.top/posts/20240318zk.html"/>
    <id>https://www.adunas.top/posts/20240318zk.html</id>
    <published>2024-03-18T06:46:23.000Z</published>
    <updated>2024-03-18T06:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<a href=""></a>。</li></ol></div><h1 id="工程实践导航"><ahref="./20240318zf.html#PCB焊接技巧">工程实践导航</a></h1>]]></content>
    
    
    <summary type="html">🍱本文总结自己的PCB焊接技巧</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="PCB焊接技巧" scheme="https://www.adunas.top/tags/PCB%E7%84%8A%E6%8E%A5%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>工程实践：平衡车</title>
    <link href="https://www.adunas.top/posts/20240318zm.html"/>
    <id>https://www.adunas.top/posts/20240318zm.html</id>
    <published>2024-03-18T06:46:23.000Z</published>
    <updated>2024-03-18T06:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><ol type="1"><li>链接：<a href=""></a>。</li></ol></div><h1 id="工程实践导航"><ahref="./20240318zf.html#平衡车">工程实践导航</a></h1>]]></content>
    
    
    <summary type="html">🍱本文记录自己手动搭建平衡车的过程</summary>
    
    
    
    <category term="工程实践" scheme="https://www.adunas.top/categories/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="自动化" scheme="https://www.adunas.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="平衡车" scheme="https://www.adunas.top/tags/%E5%B9%B3%E8%A1%A1%E8%BD%A6/"/>
    
  </entry>
  
</feed>
